openapi: 3.1.0
info:
  version: 1.0.0
  title: Outfit Of The Day
  description: Outfit Of The Day API Documentation
  termsOfService: http://swagger.io/terms/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://ootd/api
tags:
  - name: User Profile Management
    description: Operations for user profiles
  - name: Weather Information
    description: Retrieve weather information
paths:
  /weather:
    get:
      operationId: RetrieveWeather
      description: Retrieve current weather information based on location
      tags:
        - Weather Information
      responses:
        '200':
          description: Weather information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/weather'
        '400':
          $ref: '#/components/responses/bad_request'
        '404':
          $ref: '#/components/responses/not_found'
        '500':
          $ref: '#/components/responses/server_error'
      x-amazon-apigateway-request-validator: NONE
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RetrieveWeather.Arn}/invocations
      security:
        - EndpointAuthorizer:
            - api/get:all
components:
  schemas:
    weather:
      title: Weather
      type: object
      additionalProperties: false
      properties:
        temperature:
          type: number
          description: The current temperature in Fahrenheit
          example: 78
        humidity:
          type: number
          description: The current humidity level percentage
          example: 65
        description:
          type: string
          description: Short description of the weather condition
          example: Partly cloudy
    error:
      title: Error
      type: object
      properties:
        error:
          type: string
          description: Invalid Request
        message:
          type: string
          description: Invalid Request
  responses:
    bad_request:
      description: bad request by user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    not_found:
      description: resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    server_error:
      description: server side error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    unauthorized:
      description: unauthorized request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    badRequest:
      $ref: '#/components/responses/bad_request'
    notFound:
      $ref: '#/components/responses/not_found'
    serverError:
      $ref: '#/components/responses/server_error'
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
x-amazon-apigateway-gateway-responses:
  BAD_REQUEST_BODY:
    statusCode: 400
    responseTemplates:
      application/json: |
        {
          "error": $context.error.messageString
        }
